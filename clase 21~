#1

docker pull redis

docker run --name redis -v /home/feli/redis/data -p 6379:6379 -d redis

docker run -it --link redis:redis --rm redis redis-cli -h redis -p 6379

#2

* Ping "hello world"

* config get *max-*-entries*

#3

Redis strings commands are used for managing string values in Redis. Following is the syntax for using Redis string commands.

* SET strkey "stringkey"
This command sets the value at the specified key.

* GET strkey
Gets the value of a key.

* strlen strkey
Gets the length of the value stored in a key

* APPEND strkey "asd"
Appends a value to a key

#4

Redis Hashes are maps between the string fields and the string values. Hence, they are the perfect data type to represent objects.
In Redis, every hash can store up to more than 4 billion field-value pairs.

* hset hkey field1 "hashkey"
Sets the string value of a hash field

* hget hkey field1
Gets the value of a hash field stored at the specified key.

* hlen hkey
Gets the number of fields in a hash

* hvals hkey
Gets all the values in a hash

#5

Redis Lists are simply lists of strings, sorted by insertion order. You can add elements in Redis lists in the head or the tail of the list.

* lpush lkey "elemento1"

* lpush lkey "elemento2"	

* lpush lkey "elemento3"

* lpush lkey "elemento4"
Prepends one or multiple values to a list

* lrange lkey 0 3
Gets a range of elements from a list

* lpop lkey
Removes and gets the first element in a list

#6

Redis Sets are an unordered collection of unique strings. Unique means sets does not allow repition of data in a key.

* SADD dbms mysql

* SADD dbms oracle

* SADD dbms sql

* SADD dbms sql
  (integer) 0
  already exists

Adds one or more members to a set

* SMEMBERS dbms
    1) "mysql"
    2) "oracle"
    3) "sql"
Gets all the members in a set

#7

spotify: /usr/lib/x86_64-linux-gnu/libnss3.so: version `NSS_3.22' not found	

* ZADD sskey 2 mysql

* ZADD sskey 4 mongodb

* ZADD sskey 1 redis

* ZADD sskey 3 oracle
Adds one or more members to a sorted set, or updates its score, if it already exists

* ZRANGE sskey 0 10 
1) "redis"
2) "mysql"
3) "oracle"
4) "mongodb"
Returns a range of members in a sorted set, by index

* ZREMRANGEBYRANK sskey 0 2
Removes all members in a sorted set within the given indexes

#8

* Open 2 terminals

* on the first terminal write the next commands: 
    -PSUBSCRIBE redisChat #to subscribe to a channel
    -SUBSCRIBE redisChat #to read the messages

* on the second one write the next commands:
    -PUBLISH redisChat "test message" #to send a message


#9

* MULTI

* SET strkey "stringkey"

* GET strkey

* strlen strkey

* APPEND strkey " lol"

* EXEC

#10

The REDIS backup function is used to create backup of the database

in order to create a backup you need to run the following command:

"127.0.0.1:6379> SAVE"

This command will create a dump.rdb file in your Redis directory.



To restore Redis data, move Redis backup file (dump.rdb) into your 
Redis directory and start the server. To get your Redis directory,
use CONFIG command of Redis as shown below.

127.0.0.1:6379> CONFIG get dir  
1) "dir" 
2) "/user/tutorialspoint/redis-2.8.13/src"


To create Redis backup, an alternate command BGSAVE is also available. 
This command will start the backup process and run this in the background.

127.0.0.1:6379> BGSAVE  
Background saving started

#11

Redis benchmark is the utility to check the performance of Redis by running n commands simultaneously.

redis-benchmark [option] [option value] 

redis-benchmark -n 100000

#12

pip install redis

import redis

r = redis.StrictRedis(host='localhost', port=6379, db=0)

r.set('hola', 'chau')
r.get('hola')


